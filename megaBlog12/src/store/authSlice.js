import { createSlice } from "@reduxjs/toolkit";

const initialState = {
    status : false,
    userData: null
}
const authSlice = createSlice({
    name: "auth",
    initialState,//this slice specific initial state
    reducers:{
        logIn: (state, action)=>{
            state.status= true
            state.userData= action.payload.userData
        },
        logOut: (state) =>{
            state.status= false;
            state.userData= null;
        }

    }
})
export const {logIn, logOut} = authSlice.actions
console.log(authSlice.actions);// the action creators name and the name provided to the functions under reducer object are same, and the type of the action is  also based on that for example {type:"auth/logIn"}
console.log(authSlice);
export default authSlice.reducer//my theory: the createSlice is returning a reducer that has a switch case block with two cases for two actions return by the two action creators, generated by the createSlice hook, these two action creators are named logIn and logOut. if a case has the action type {type:"authSlice/logIn"} it also has the functionality that is provided to the logIn function whic is a property of the reducer object, that was passed while calling the createSlice function. there is also a default which returns the existiing state if none of the cases matches to the action type. here the reducer object is equivqlent to the case block    